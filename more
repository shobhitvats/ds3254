Data Structures and Algorithms in C++
This document contains C++ implementations of various data structures and algorithms, along with explanations and additional questions that could be asked in a quiz or interview.

1. Binary Search Tree (BST)
BST Implementation
cpp
Copy
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

class BST {
private:
    Node* root;

    // Helper function to insert a node
    Node* insertHelper(Node* node, int value) {
        if (!node) {
            return new Node(value);
        }
        if (value < node->data) {
            node->left = insertHelper(node->left, value);
        } else if (value > node->data) {
            node->right = insertHelper(node->right, value);
        }
        return node;
    }

    // Helper function to search for a node
    bool searchHelper(Node* node, int value) const {
        if (!node) {
            return false;
        }
        if (value == node->data) {
            return true;
        } else if (value < node->data) {
            return searchHelper(node->left, value);
        } else {
            return searchHelper(node->right, value);
        }
    }

    // Helper function to find the minimum node in a subtree
    Node* findMin(Node* node) const {
        while (node->left) {
            node = node->left;
        }
        return node;
    }

    // Helper function to delete a node
    Node* deleteHelper(Node* node, int value) {
        if (!node) {
            return nullptr;
        }
        if (value < node->data) {
            node->left = deleteHelper(node->left, value);
        } else if (value > node->data) {
            node->right = deleteHelper(node->right, value);
        } else {
            // Node to delete found

            // Case 1: Node has no children or only one child
            if (!node->left) {
                Node* temp = node->right;
                delete node;
                return temp;
            } else if (!node->right) {
                Node* temp = node->left;
                delete node;
                return temp;
            }

            // Case 2: Node has two children
            // Find the in-order successor (smallest in the right subtree)
            Node* successor = findMin(node->right);

            // Copy the successor's data to the current node
            node->data = successor->data;

            // Delete the successor node
            node->right = deleteHelper(node->right, successor->data);
        }
        return node;
    }

    // Helper function for in-order traversal
    void inOrderHelper(Node* node) const {
        if (node) {
            inOrderHelper(node->left);
            cout << node->data << " ";
            inOrderHelper(node->right);
        }
    }

    // Helper function for pre-order traversal
    void preOrderHelper(Node* node) const {
        if (node) {
            cout << node->data << " ";
            preOrderHelper(node->left);
            preOrderHelper(node->right);
        }
    }

    // Helper function for post-order traversal
    void postOrderHelper(Node* node) const {
        if (node) {
            postOrderHelper(node->left);
            postOrderHelper(node->right);
            cout << node->data << " ";
        }
    }

public:
    BST() : root(nullptr) {}

    // Insert a new node
    void insert(int value) {
        root = insertHelper(root, value);
    }

    // Search for a node
    bool search(int value) const {
        return searchHelper(root, value);
    }

    // Delete a node
    void remove(int value) {
        root = deleteHelper(root, value);
    }

    // In-order traversal
    void inOrder() const {
        cout << "In-order traversal: ";
        inOrderHelper(root);
        cout << endl;
    }

    // Pre-order traversal
    void preOrder() const {
        cout << "Pre-order traversal: ";
        preOrderHelper(root);
        cout << endl;
    }

    // Post-order traversal
    void postOrder() const {
        cout << "Post-order traversal: ";
        postOrderHelper(root);
        cout << endl;
    }
};

int main() {
    BST bst;

    bst.insert(50);
    bst.insert(30);
    bst.insert(70);
    bst.insert(20);
    bst.insert(40);
    bst.insert(60);
    bst.insert(80);

    cout << "BST traversals:" << endl;
    bst.inOrder();
    bst.preOrder();
    bst.postOrder();

    cout << "Search for 40: " << (bst.search(40) ? "Found" : "Not Found") << endl;
    cout << "Search for 100: " << (bst.search(100) ? "Found" : "Not Found") << endl;

    bst.remove(50);
    cout << "BST after deleting 50:" << endl;
    bst.inOrder();

    return 0;
}
Additional BST Questions
1. Find the Height of a BST
cpp
Copy
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

int height(Node* node) {
    if (!node) {
        return 0;
    }
    int leftHeight = height(node->left);
    int rightHeight = height(node->right);
    return max(leftHeight, rightHeight) + 1;
}

int main() {
    Node* root = new Node(10);
    root->left = new Node(5);
    root->right = new Node(15);
    root->left->left = new Node(2);
    root->left->right = new Node(7);
    root->right->right = new Node(20);

    cout << "Height of the BST: " << height(root) << endl;

    return 0;
}
2. Check if a Binary Tree is a BST
cpp
Copy
#include <iostream>
#include <climits>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

bool isBSTHelper(Node* node, int min, int max) {
    if (!node) {
        return true;
    }
    if (node->data <= min || node->data >= max) {
        return false;
    }
    return isBSTHelper(node->left, min, node->data) && isBSTHelper(node->right, node->data, max);
}

bool isBST(Node* root) {
    return isBSTHelper(root, INT_MIN, INT_MAX);
}

int main() {
    Node* root = new Node(10);
    root->left = new Node(5);
    root->right = new Node(15);
    root->left->left = new Node(2);
    root->left->right = new Node(7);
    root->right->right = new Node(20);

    cout << "Is the tree a BST? " << (isBST(root) ? "Yes" : "No") << endl;

    return 0;
}
3. Find the Lowest Common Ancestor (LCA) in a BST
cpp
Copy
#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

Node* findLCA(Node* root, int n1, int n2) {
    if (!root) {
        return nullptr;
    }
    if (root->data > n1 && root->data > n2) {
        return findLCA(root->left, n1, n2);
    }
    if (root->data < n1 && root->data < n2) {
        return findLCA(root->right, n1, n2);
    }
    return root;
}

int main() {
    Node* root = new Node(20);
    root->left = new Node(10);
    root->right = new Node(30);
    root->left->left = new Node(5);
    root->left->right = new Node(15);
    root->right->left = new Node(25);
    root->right->right = new Node(35);

    Node* lca = findLCA(root, 5, 15);
    cout << "LCA of 5 and 15: " << (lca ? lca->data : -1) << endl;

    return 0;
}
4. Serialize and Deserialize a BST
cpp
Copy
#include <iostream>
#include <sstream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Serialize the BST
string serialize(Node* root) {
    if (!root) {
        return "#";
    }
    return to_string(root->data) + "," + serialize(root->left) + "," + serialize(root->right);
}

// Deserialize the BST
Node* deserializeHelper(istringstream& iss) {
    string token;
    getline(iss, token, ',');
    if (token == "#") {
        return nullptr;
    }
    Node* root = new Node(stoi(token));
    root->left = deserializeHelper(iss);
    root->right = deserializeHelper(iss);
    return root;
}

Node* deserialize(string data) {
    istringstream iss(data);
    return deserializeHelper(iss);
}

int main() {
    Node* root = new Node(2);
    root->left = new Node(1);
    root->right = new Node(3);

    string serialized = serialize(root);
    cout << "Serialized tree: " << serialized << endl;

    Node* deserializedRoot = deserialize(serialized);
    cout << "Deserialized tree (in-order): ";
    // Implement in-order traversal to verify
    return 0;
}
2. Heap Data Structure
Heap Sort Using Heap Data Structure
cpp
Copy
#include <iostream>
#include <vector>
using namespace std;

class Heap {
private:
    vector<int> heap;

    // Non-recursive heapify function for max-heap
    void heapifyDown(int index, int heapSize) {
        while (true) {
            int leftChild = 2 * index + 1;
            int rightChild = 2 * index + 2;
            int largest = index;

            if (leftChild < heapSize && heap[leftChild] > heap[largest]) {
                largest = leftChild;
            }
            if (rightChild < heapSize && heap[rightChild] > heap[largest]) {
                largest = rightChild;
            }
            if (largest != index) {
                swap(heap[index], heap[largest]);
                index = largest;
            } else {
                break;
            }
        }
    }

public:
    // Constructor to build a heap from an array
    Heap(const vector<int>& arr) : heap(arr) {
        // Build the heap
        for (int i = heap.size() / 2 - 1; i >= 0; --i) {
            heapifyDown(i, heap.size());
        }
    }

    // Perform heap sort
    void heapSort() {
        for (int i = heap.size() - 1; i > 0; --i) {
            swap(heap[0], heap[i]); // Move the root (max element) to the end
            heapifyDown(0, i);      // Heapify the reduced heap
        }
    }

    // Print the heap
    void print() const {
        for (int value : heap) {
            cout << value << " ";
        }
        cout << endl;
    }
};

int main() {
    vector<int> arr = {12, 11, 13, 5, 6, 7};

    Heap heap(arr);

    cout << "Original array: ";
    heap.print();

    heap.heapSort();

    cout << "Sorted array: ";
    heap.print();

    return 0;
}
Additional Heap Questions
1. Implement a Min-Heap
cpp
Copy
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class MinHeap {
private:
    vector<int> heap;

    void heapifyUp(int index) {
        while (index > 0) {
            int parentIndex = (index - 1) / 2;
            if (heap[index] < heap[parentIndex]) {
                swap(heap[index], heap[parentIndex]);
                index = parentIndex;
            } else {
                break;
            }
        }
    }

    void heapifyDown(int index) {
        int n = heap.size();
        while (true) {
            int leftChild = 2 * index + 1;
            int rightChild = 2 * index + 2;
            int smallest = index;

            if (leftChild < n && heap[leftChild] < heap[smallest]) {
                smallest = leftChild;
            }
            if (rightChild < n && heap[rightChild] < heap[smallest]) {
                smallest = rightChild;
            }
            if (smallest != index) {
                swap(heap[index], heap[smallest]);
                index = smallest;
            } else {
                break;
            }
        }
    }

public:
    void push(int value) {
        heap.push_back(value);
        heapifyUp(heap.size() - 1);
    }

    int pop() {
        if (heap.empty()) {
            throw underflow_error("Heap is empty");
        }
        int minValue = heap[0];
        heap[0] = heap.back();
        heap.pop_back();
        if (!heap.empty()) {
            heapifyDown(0);
        }
        return minValue;
    }

    int top() const {
        if (heap.empty()) {
            throw underflow_error("Heap is empty");
        }
        return heap[0];
    }

    bool isEmpty() const {
        return heap.empty();
    }

    void print() const {
        for (int value : heap) {
            cout << value << " ";
        }
        cout << endl;
    }
};

int main() {
    MinHeap heap;

    heap.push(10);
    heap.push(5);
    heap.push(20);
    heap.push(1);

    cout << "Heap contents: ";
    heap.print();

    cout << "Min element: " << heap.pop() << endl;

    cout << "Heap after pop: ";
    heap.print();

    return 0;
}
2. Find the Kth Largest Element Using a Min-Heap
cpp
Copy
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int findKthLargest(vector<int>& nums, int k) {
    priority_queue<int, vector<int>, greater<int>> minHeap;

    for (int num : nums) {
        minHeap.push(num);
        if (minHeap.size() > k) {
            minHeap.pop();
        }
    }

    return minHeap.top();
}

int main() {
    vector<int> nums = {3, 2, 1, 5, 6, 4};
    int k = 2;

    cout << "Kth largest element: " << findKthLargest(nums, k) << endl;

    return 0;
}
3. Check if an Array Represents a Max-Heap
cpp
Copy
#include <iostream>
#include <vector>
using namespace std;

bool isMaxHeap(const vector<int>& arr, int index = 0) {
    int n = arr.size();
    if (index >= n) {
        return true;
    }

    int leftChild = 2 * index + 1;
    int rightChild = 2 * index + 2;

    if (leftChild < n && arr[leftChild] > arr[index]) {
        return false;
    }
    if (rightChild < n && arr[rightChild] > arr[index]) {
        return false;
    }

    return isMaxHeap(arr, leftChild) && isMaxHeap(arr, rightChild);
}

int main() {
    vector<int> arr = {10, 5, 3, 2, 4, 1};

    cout << "Is the array a Max-Heap? " << (isMaxHeap(arr) ? "Yes" : "No") << endl;

    return 0;
}